%YAML 1.2
---
name: Help
scope: text.hyperhelp.help
first_line_match: '^%hyperhelp'
hidden: true
variables:
  block_markup: '^\s*(`{3})(?![^`]*`)'
  block_markup_end: '^\s*(`{3})\s*$'
  separator: '(?:(?:\+|\|)?([=-])\1{3,}(?:\+|\|)?)|(?:\|)'

contexts:
  main:
    - include: help-header
    - include: help-source-header
    - match: ''
      set: body
  help-header:
    - match: '^(\*)([^*\|]+)(\*)\s+(.*?)\s{2,}(.*)'
      captures:
        0: meta.help.header
        1: string.unquoted punctuation.anchor.begin
        2: string.unquoted meta.anchor
        3: string.unquoted punctuation.anchor.end
        4: storage.type.class meta.title
        5: variable.language meta.date
      set: body
  help-source-header:
    - match: '^(%)(hyperhelp)'
      captures:
        1: punctuation.definition.directive
        2: keyword.other.directive meta.directive
      push: header-keypairs
  header-keypairs:
    - match: '\b([a-z]+)(=)(")([^"]*)(")'
      captures:
        1: storage.type.class meta.key
        2: keyword.operator
        3: string.quoted.double
        4: string.quoted.double meta.value
        5: string.quoted.double
    - match: '\S'
      scope: invalid.illegal.hyperhelp.header
    - match: '$'
      set: body
  comments:
    - match: '<\*\*'
      scope: punctuation.definition.comment.begin.help
      push:
        - meta_scope: comment.block.help
        - match: '(\*\*>)(\n)?'
          captures:
            1: punctuation.definition.comment.end.help
          pop: true
  key-bindings:
    - match: '<(?=[>\w?])'
      scope: variable.language punctuation.definition.keybind.begin.help
      push:
        - meta_scope: variable.language meta.keybind
        - match: '>(?=[^>])'
          pop: true
  inline-code-block:
    - match: '`'
      scope: punctuation.definition.raw.begin
      push:
        - meta_content_scope: markup.raw.inline
        - match: '`'
          scope: punctuation.definition.raw.end
          pop: true
  code-blocks:
    - match: '{{block_markup}}(json).*$\n?'
      captures:
        0: meta.code-fence.definition.begin.json
        1: punctuation.definition.code-fence.begin.json
        2: constant.other.language-name
      embed: scope:source.json
      embed_scope: markup.raw.code-fence.json
      escape: '{{block_markup_end}}'
      escape_captures:
        0: meta.code-fence.definition.end.json
        1: punctuation.definition.code-fence.end.json
    - match: '{{block_markup}}(python|py).*$\n?'
      captures:
        0: meta.code-fence.definition.begin.python
        1: punctuation.definition.code-fence.begin.python
        2: constant.other.language-name
      embed: scope:source.python
      embed_scope: markup.raw.code-fence.python
      escape: '{{block_markup_end}}'
      escape_captures:
        0: meta.code-fence.definition.end.python
        1: punctuation.definition.code-fence.end.python
    - match: '{{block_markup}}(xml|plist).*$\n?'
      captures:
        0: meta.code-fence.definition.begin.xml
        1: punctuation.definition.code-fence.begin.xml
        2: constant.other.language-name
      embed: scope:text.xml
      embed_scope: markup.raw.code-fence.xml
      escape: '{{block_markup_end}}'
      escape_captures:
        0: meta.code-fence.definition.end.xml
        1: punctuation.definition.code-fence.end.xml
    - match: '{{block_markup}}([\w-]*).*$\n?'
      captures:
        0: meta.code-fence.definition.begin
        1: punctuation.definition.code-fence.begin
        2: constant.other.language-name
      push:
        - meta_content_scope: markup.raw.code-fence
        - match: '{{block_markup_end}}'
          captures:
            0: meta.code-fence.definition.end
            1: punctuation.definition.code-fence.end
          pop: true
  links:
    - match: '\|(?=[\w:$])'
      scope: storage punctuation.link.begin
      push:
        - meta_content_scope: storage meta.link
        - match: '\|'
          scope: storage punctuation.link.end
          pop: true
  anchors:
    - match: '\*(?=[\w:$])'
      scope: string.unquoted punctuation.anchor.begin
      push:
        - meta_content_scope: string.unquoted meta.anchor
        - match: '\*'
          scope: string.unquoted punctuation.anchor.end
          pop: true
    - match: '\*\|(?=[\w:$])'
      scope: string.unquoted punctuation.anchor.hidden.begin
      push:
        - meta_content_scope: string.unquoted meta.anchor.hidden
        - match: '\|\*'
          scope: string.unquoted punctuation.anchor.hidden.end
          pop: true
    - match: '^\s*(?=#)'
      push: header-anchors
  header-anchor-terminator:
    - match: '[ ]*(#*)[ ]*($\n?)'
      captures:
        1: string.unquoted punctuation.anchor.end.heading
      pop: true
  header-anchors:
    - match: '(#)(?!#)\s*(?=\S)'
      captures:
        1: string.unquoted punctuation.anchor.begin.heading
      set:
        - meta_scope: meta.heading.anchor
        - meta_content_scope: string.unquoted meta.anchor.heading.1
        - include: header-anchor-terminator
    - match: '(##)(?!#)\s*(?=\S)'
      captures:
        1: string.unquoted punctuation.anchor.begin.heading
      set:
        - meta_scope: meta.heading.anchor
        - meta_content_scope: string.unquoted meta.anchor.heading.2
        - include: header-anchor-terminator
    - match: '(#{3,})(?!#)\s*(?=\S)'
      captures:
        1: string.unquoted punctuation.anchor.begin.heading
      set:
        - meta_scope: meta.heading.anchor
        - meta_content_scope: string.unquoted meta.anchor.heading.3
        - include: header-anchor-terminator
    - match: ''
      pop: true
  separators:
    - match: '{{separator}}'
      scope: storage meta.separator
  body:
    - include: comments
    - include: key-bindings
    - include: code-blocks
    - include: inline-code-block
    - include: links
    - include: anchors
    - include: separators
